ZSH_INIT_TIME=$(date +%s%N)
# ===== Variable ===== {{{
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export ZDIR=$HOME/.zsh
fpath=($HOME/.zsh/completions $fpath)

# @function: source file if exist.
so() {
    FILE=$1
    [ -f "$FILE" ] && source $FILE
}

# }}}

# ===== Plugins ===== {{{

setopt promptsubst
so $ZDIR/zinit.zsh

ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
# unset ZSH_AUTOSUGGEST_USE_ASYNC

# }}}

# ===== Zsh ===== {{{

setopt autocd		        # Automatically cd into typed directory.
stty stop undef		        # Disable ctrl-s to freeze terminal.
setopt interactive_comments # Allow Comment in Interactive Shell

# History
HISTSIZE=10000000
SAVEHIST=10000000
HISTFILE=${XDG_CACHE_HOME:-$HOME/.cache}/zsh/history
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_DUPS
setopt SHARE_HISTORY

# Binkeys
bindkey -v # v = vim || e = emacs
KEYTIMEOUT=1

bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Zsh Modules
MODULE_DIR=$ZDIR/modules
if [ -d $MODULE_DIR ]; then
    for f in $MODULE_DIR/?*; do
        so $f
    done
    unset f
fi

# vicmd by default
# zle-line-init() { zle -K vicmd; }
# zle -N zle-line-init

# Change cursor shape for different vi modes.
zle-keymap-select() {
    if  [[ ${KEYMAP} == vicmd ]] ||
        [[ $1 = 'block' ]]
    then
        echo -ne '\e[1 q'
    elif [[ ${KEYMAP} == main ]] ||
        [[ ${KEYMAP} == viins ]] ||
        [[ ${KEYMAP} = '' ]] ||
        [[ $1 = 'beam' ]]
    then
        echo -ne '\e[5 q'
    fi
}
zle -N zle-keymap-select

# Cursor Beam
_fix_cursor() { echo -ne '\e[5 q'; }
precmd_functions+=(_fix_cursor)

#}}}

# ===== Prompt ===== {{{
if command -v "starship" >/dev/null 2>&1; then
    export STARSHIP_CONFIG=$XDG_CONFIG_HOME/starship.toml
    export STARSHIP_CACHE=$XDG_CACHE_HOME/starship/cache
    eval "$(starship init zsh)"
fi

# }}}

set_win_title(){
    print -Pn "\e]0;%~\a"
}
precmd_functions+=(set_win_title)

# ===== User ===== {{{
# User alias definition
ALIASES=${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliases
so $ALIASES

# User function definition
FUNCTIONS=${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions
if [ -d $FUNCTIONS ]; then
    for f in $FUNCTIONS/?*; do
        so $f
    done
    unset f
fi

# User config
CONFIGS=${XDG_CONFIG_HOME:-$HOME/.config}/shell/configs
if [ -d $CONFIGS ]; then
    for f in $CONFIGS/?*; do
        so $f
    done
    unset f
fi

export TODO=${NOTE_DIR:-$HOME/Documents/Notes}/TODO.md
export SCHEDULE=${NOTE_DIR:-$HOME/Documents/Notes}/SCHEDULE.md

# broot, better cd
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/broot/launcher/bash/br" ] &&
    so ${XDG_CONFIG_HOME:-$HOME/.config}/broot/launcher/bash/br

# Start CLI Apps
command -v "zoxide" >/dev/null 2>&1 && eval "$(zoxide init zsh)"
command -v "fnm" >/dev/null 2>&1 && eval "$(fnm env)"

export GPG_TTY="$(tty)"
gpg-connect-agent updatestartuptty /bye >/dev/null

# -------------------------------------------------
skim-history-widget() {
    local selected num
    echo -ne "\r"
    setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
    selected=( $(fc -rl 1 |
        SKIM_DEFAULT_OPTIONS="--height=40% $SKIM_DEFAULT_OPTIONS -n2..,.. --tiebreak=score,index \
        $SKIM_CTRL_R_OPTS --query=${(qqq)LBUFFER} -m" sk) 
    )
    local ret=$?
    if [ -n "$selected" ]; then
        num=$selected[1]
        if [ -n "$num" ]; then
            zle vi-fetch-history -n $num
        fi
    fi
    zle reset-prompt
    return $ret
}
zle -N skim-history-widget
bindkey '^R' skim-history-widget

skim-redraw-prompt() {
    local precmd
    for precmd in $precmd_functions; do
        $precmd
    done
    zle reset-prompt
}
zle -N skim-redraw-prompt

# }}}

ZSH_LOADED_TIME=$(date +%s%N)
ZSH_STARTUP_TIME=$(((ZSH_LOADED_TIME - ZSH_INIT_TIME) / 1000000))

printf "Startup time: $ZSH_STARTUP_TIME ms\n"
unset ZSH_INIT_TIME ZSH_LOADED_TIME ZSH_STARTUP_TIME
