#!/usr/bin/env bash
# vim: ft=sh: sw=4: ts=4:

# File              : rofi-translate (dmenu_translate)
# License           : MIT License
# Author            : M. Nabil Adani <nblid48@gmail.com>
# Last Modified By  : Atalazer <baraboyolali@gmail.com>

DMENU="rofi -dmenu -i"
ICON="$HOME/.config/awesome/icons/linebit/keyboard.png"

DEFAULT_COUNTRY="Indonesian"
COUNTRY='''
[
  { "name": "English"   , "code": "en" },
  { "name": "Indonesian", "code": "id" },
  { "name": "Javanese"  , "code": "jv" },
  { "name": "Arabic"    , "code": "ar" },
  { "name": "French"    , "code": "fr" },
  { "name": "German"    , "code": "de" },
  { "name": "Italian"   , "code": "it" },
  { "name": "Japanese"  , "code": "ja" }
]
'''

SOURCE=""
TARGET=""
ASK_TARGET=true

translate_text() {
    source=$SOURCE
    target=$TARGET
    
    text="$1"
    [ -z "$text" ] && exit 1

    if [ -z "$TARGET" ] && [ "$ASK_TARGET" = true ]; then
        name=$(echo "$COUNTRY" | jq -r ".[].name" | \
            $DMENU -p "Select Target Language" -mesg "$text" -select "$DEFAULT_COUNTRY")
        target=$(echo "$COUNTRY" | jq -r ".[] | select(.name == \"$name\") | .code")
    fi

    if [ -n "$target" ]; then
        result=$(trans -b --download-audio-as /tmp/trans.ts "$source":"$target" "$text")
        again=true

        if [ -n "$POP" ]; then
            again=false
            if awesome-client "print(true)" >/dev/null 2>&1;then 
                awesome-client "
                    -- IMPORTANT NOTE: THIS PART OF THE SCRIPT IS LUA!
                    local naughty = require('naughty')
                    local awful = require('awful')
                    local beautiful = require('beautiful')
                    local text = \"$text\"
                    local result = \"$result\"
                    local add_to_dict = naughty.action({
                        name = 'Add To Dictionary',
                        icon_only = false,
                    })
                    add_to_dict:connect_signal('invoked', function()
                        awful.spawn(string.format('dict add \"%s\" \"%s\"', text, result))
                    end)
                    naughty.notification ({
                        app_name = 'translate',
                        icon = '$ICON',
                        timeout = 5,
                        font = beautiful.notification_font,
                        width = beautiful.notification_width,
                        height = beautiful.notification_height,
                        title = '<b>Translate</b>',
                        message = '<b>Text:</b>\n$text\n<b>Result:</b>\n$result',
                        actions = { add_to_dict }
                    })
                "
            else
                notify-send \
                    --app-name=translate -t 5000 -u normal \
                    -i "$ICON" "Translate" "<b>Text:</b>\n$text\n<b>Result:</b>\n$result"
            fi
        fi

        echo "$result" | xclip

        while $again; do
            menu=$(echo -e "Retry\nPlay Audio\nCopy To Clipboard\nAdd To Dictionary\nExit" |
                $DMENU -p "Result" -mesg "$result" -select "Play Audio")
            case "$menu" in
            "Play Audio") mpv /tmp/trans.ts & ;;
            "Add To Dictionary")
                notify-send -u low -i "$ICON" "Translate" "Result Added To Dictionary"
                command -v dict >/dev/null 2>&1 && dict add "$text" "$result"
                again=false
                ;;
            "Copy To Clipboard")
                echo -n "$result" | xclip -selection clipboard
                notify-send -u low -i "$ICON" "Translate" "Result Saved To Clipboard"
                again=false
                ;;
            "Retry")
                text=$(echo "$text" | cut -c 1-20)
                result=$(echo "$result" | cut -c 1-20)
                text=$($DMENU -p "Text")
                translate_text "$text"
                ;;
            "Exit" | *) again=false ;;
            esac
        done
    fi
}

while [ -n "$1" ]; do
    case "$1" in
        "--source") shift; SOURCE=$1 ;;
        "--target") shift; TARGET=$1 ;;
        "--ask-target") shift; ASK_TARGET=$1 ;;
        "--pop") POP=true ;;
        "-c" | "--clipboard")
            text=$(xclip -selection clipboard -o | tr --delete '\n')
            translate_text "$text"
            ;;
        "-i" | "--input")
            text=$($DMENU -p "Text")
            translate_text "$text"
            ;;
        "-m" | "--image")
            text=$(shot --ocr)
            translate_text "$text"
            ;;
        "-t" | "--text")
            shift; text="$1"
            [ -z "$text" ] && exit 1
            translate_text "$text"
            ;;
        "-h" | "--help" | *)
            echo "Usage $(basename "$0") [options]"
            echo "Available Options:"
            echo "-c, --clipboard   read text from clipboard"
            echo "-i, --input       read text from user input"
            echo "-m, --image       read from image text"
            echo "-t, --text        read directly from a text. Useful for translate from selected text"
            ;;
    esac
    shift
done
