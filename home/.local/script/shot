#!/usr/bin/env bash

DMENU="rofi -dmenu -i -p Screenshot -lines 10 -width 30"
_XDG_=$(xdg-user-dir PICTURES)/Screenshots
SCREENSHOT_DIR=${_XDG_:-$HOME/Pictures/Screenshots}
SAVED_NAME=$SCREENSHOT_DIR/$(date +%Y%m%d-%H%M%S)-maim.png
TMP_IMG=/tmp/image.png

sleep=3

border_size=1
rounded_corner=3
shadow_size="50x10+0+10"

background_size=3
background_color="#ffffff"
color_fg="#ffffff"
color_bg="#1F2233"
color_profile="/usr/share/color/icc/colord/sRGB.icc"

font_size=11
font='JetBrains-Mono-Bold-Nerd-Font-Complete'

add_annotate=false
long_text="$(date '+%A, %d/%m/%Y') $(date '+%H:%M:%S')"
short_text="$(date '+%d/%m/%Y')"

add_author=false
author_position=("South" "+0+26")
author="By: Atalariq Barra H."

[[ -f ~/.config/script/shot.conf ]] && source ~/.config/script/shot.conf

check(){
    if [ ! -d "$SCREENSHOT_DIR" ];then
        /bin/mkdir -p "$SCREENSHOT_DIR"
    fi

    if [[ -f "$TMP_IMG" ]]; then
        /usr/bin/rm "$TMP_IMG"
    fi
}

# Check DE/WM
check_wm() {
    # Identify environment
    DE="${DESKTOP_STARTUP_ID}"
    if [[ ! -z "$DE" && "$DE" == *"awesome"* ]] || [[ ! -z "$CHECK_AWESOME_CLIENT" ]]; then
        echo "AWESOME"
        return
    fi
    echo "NOT_AWESOME"
}

parse(){
    notify-send -t $((1000*3)) --app-name=screenshot "Shot" "Parsing Image"
    
    IMG=$TMP_IMG
    DIR=/tmp

    if [[ $add_mac_titlebar == true ]]; then
        if [[ $add_text == true ]]; then
            width=$(identify -format "%w" $IMG)
            text="$long_text"
            if (($width <= 200)); then
                text="$shor_ttext"
            fi
        else
            text=""
        fi

        convert $IMG \
            -font $font -gravity north \
            -background ${color_bg} -fill ${color_fg} \
            -splice 0x28 -annotate +0+7 "${text}" \
            $IMG

        convert $IMG \
            -gravity NorthWest -draw "image Over 13,7 0,0 '${close_icon}'" \
            -gravity NorthWest -draw "image Over 33,7 0,0 '${min_icon}'" \
            -gravity NorthWest -draw "image Over 53,7 0,0 '${max_icon}'" \
            $IMG
            
        # Set rounded corner
        convert "$IMG" \( +clone  -alpha extract -draw 'fill black polygon 0,0 0,'"${rounded_corner}"' '"${rounded_corner}"',0 fill white circle '"${rounded_corner}"','"${rounded_corner}"' '"${rounded_corner}"',0' \
        \( +clone -flip \) -compose Multiply -composite \
        \( +clone -flop \) -compose Multiply -composite \
        \) -alpha off -compose CopyOpacity -composite -compose over "$IMG"
    fi

    # Set image shadow
    convert $IMG \
        \( +clone -background black \
        -shadow ${shadow_size} \) +swap -background none \
        -layers merge +repage $IMG

    # Set image border
    convert "$IMG" \
        -bordercolor ${background_color} \
        -border ${background_size} \
        "$IMG"

    # Set image author if enabled
    if [[ $add_author == true ]]; then
        echo -n " ${author} " | convert $IMG \
        -gravity ${author_position[0]} -pointsize ${font_size} -fill ${color_fg} \
        -undercolor ${color_bg} -font ${font} \
        -annotate ${author_position[1]} @- $IMG && \
        convert $IMG -gravity South -chop 0x$(( $background_size / 2)) $IMG
    
        # Add top bg
        convert $IMG -gravity North -background ${background_color} \
            -splice 0x$(( $background_size / 2)) $IMG

    fi

    # Set image profile
    convert $IMG -profile ${color_profile} $IMG

}

notify() {
    MSG=$1
    FILE=$TMP_IMG

    if [[ "$(check_wm)" == "AWESOME" ]]; then
        awesome-client "
        -- IMPORTANT NOTE: THIS PART OF THE SCRIPT IS LUA!
        local naughty = require('naughty')
        local awful = require('awful')
        local beautiful = require('beautiful')
        local dpi = beautiful.xresources.apply_dpi

        local file = '${FILE}'
        local message = '${MSG}'

        local notify_send = function(msg, action)
            if type(action) ~= 'table' then
                action = {}
            end
            naughty.notification ({
                app_name = 'screenshot',
                icon = file,
                timeout = 5,
                title = '<b>Shot</b>',
                message = msg,
                actions = action or nil,
            })
        end

        local save_image = naughty.action {
            name = 'Save',
            icon_only = false,
        }

        local rename_image = naughty.action {
            name = 'Rename',
            icon_only = false,
        }
        
        local open_image = naughty.action {
            name = 'Open',
            icon_only = false,
        }

        local open_folder = naughty.action {
            name = 'Folder',
            icon_only = false,
        }

        local delete_image = naughty.action {
            name = 'Delete',
            icon_only = false,
        }

        local to_clipboard = naughty.action {
            name = 'Clip',
            icon_only = false,
        }

        local prompt_rename_image = function()
            awful.prompt.run {
                prompt       = 'New File Name: ',
                textbox      = awful.screen.focused().mypromptbox.widget,
                history_path = awful.util.get_cache_dir() .. '/history',
                exe_callback = function(new_name)
                    if not new_name or #new_name == 0 then return end
                    local old_file_name = file
                    local new_file_name = '${SCREENSHOT_DIR}/'..new_name..'.png'
                    awful.spawn('mv '..file..' '..new_file_name, false)
                    file = new_file_name

                    awesome.emit_signal('notifbox::deleted')

                    -- notify_send('Image Renamed From <b>'..old_file_name..'</b> To <b>'..file..'</b>', {})
                    notify_send('Image Renamed To <b>'..file..'</b>',{ open_image, open_folder, to_clipboard, rename_image, delete_image })
                end
            }
        end

        delete_image:connect_signal('invoked', function()
            awesome.emit_signal('notifbox::deleted')
            awful.spawn('rm '..file, false)
            notify_send(file..' Deleted', {})
        end)

        save_image:connect_signal('invoked', function()
            awesome.emit_signal('notifbox::deleted')
            oldfile = file
            file = '${SAVED_NAME}'
            awful.spawn('cp '..oldfile..' '..file, false)
            notify_send(message, { open_image, open_folder, to_clipboard, rename_image, delete_image })
        end)

        open_image:connect_signal('invoked', function()
            awful.spawn('feh ' .. file, false)
        end)

        open_folder:connect_signal('invoked', function()
            awful.spawn('xdg-open ' .. '${SCREENSHOT_DIR}', false)
        end)

        to_clipboard:connect_signal('invoked', function()
            awful.spawn('xclip -selection clipboard -i '..file..' -t image/png', false)
        end)

        rename_image:connect_signal('invoked', function()
            prompt_rename_image()
        end)

        notify_send(message, { open_image, to_clipboard, save_image, delete_image })
        "
    elif [[ "$(check_wm)" == "NOT_AWESOME" ]]; then
        notify-send --app-name=screenshot "Shot" "${MSG}"
    fi
}

to_clip(){
    notify-send --app-name=screenshot "Shot" "Screenshot Saved to Clipboard"
    if [ $XDG_SESSION_TYPE == "wayland" ]; then
        wl-copy < $TMP_IMG
    else
        xclip -selection clipboard -i $TMP_IMG -t image/png
    fi

}

_shot(){
    check
    if [ $XDG_SESSION_TYPE == "wayland" ]; then
        case $1 in
            normal) grimshot output $TMP_IMG ;;
            active) grimshot active $TMP_IMG ;;
            select) grimshot area $TMP_IMG ;;
            delay) 
                notify-send -t $((1000*1)) --app-name=screenshot "Shot" "Shot After ${sleep} Sec"
                sleep $sleep && \
                    grimshot output $TMP_IMG  ;;
        esac
    else
        case $1 in
            normal) maim -m 1 $TMP_IMG ;;
            active) maim -u -m 1 -i $(xdotool getactivewindow) $TMP_IMG ;;
            select) maim -u -m 1 -s $TMP_IMG ;;
            delay)
                notify-send -t $((1000*1)) --app-name=screenshot "Shot" "Shot After ${sleep} Sec"
                maim -m 1 -d $sleep $TMP_IMG ;;
        esac
    fi
}

_noparse(){
    case $1 in
        full)
            _shot normal && \
            notify "Screenshot Saved"
        ;;
        active)
            _shot active && \
            notify "Screenshot from Active Windows Saved"
        ;;
        select)
            _shot select && \
            notify "Screenshot Selected Has been Saved"
        ;;
        delay)
            _shot delay && \
            notify "Screenshot Saved"
        ;;
    esac
}

_parse(){
    case $1 in
        full)
            _shot normal && \
            parse && \
            notify "Screenshot Saved"
        ;;
        active)
            _shot active && \
            parse && \
            notify "Screenshot from Active Windows Saved"
        ;;
        select)
            _shot select && \
            parse && \
            notify "Screenshot Selected Has been Saved"
        ;;
        delay)
            _shot delay && \
            parse && \
            notify "Screenshot Saved"
        ;;
    esac
}

interactive(){
    OPTIONS='''
    [
        ["Active",                  "_parse active"],
        ["Clipboard",               "_parse clipboard"],
        ["Delay",                   "_parse delay"],
        ["Fullscreen",              "_parse full"],
        ["Select",                  "_parse select"],
        ["Active (Noparse)",        "_noparse active"],
        ["Clipboard (Noparse)",     "_noparse clipboard"],
        ["Fullscreen (Noparse)",    "_noparse full"],
        ["Delay (Noparse)",         "_noparse delay"],
        ["Select (Noparse)",        "_noparse select"]
    ]
    '''
    menu=$(echo $OPTIONS | jq -r ".[][0]" | $DMENU)
    $(echo $OPTIONS | jq -r ".[] | select(.[0] == \"$menu\") | .[1]")
}

OPT=${1:-interactive}
case $OPT in
    -a|active)             _parse active ;;
    -c|clipboard)          _parse clipboard ;;
    -d|delay)              _parse delay;;
    -f|full)               _parse full ;;
    -s|select)             _parse select ;;
    -A|active_noparse)     _noparse active ;;
    -C|clipboard_noparse)  _noparse clipboard ;;
    -D|delay_noparse)      _noparse delay ;;
    -F|full_noparse)       _noparse full ;;
    -S|select_noparse)     _noparse select ;;
    -i|interactive)        interactive;;
esac
